// api/curevia-chat.js

// === ENV ===
const OPENAI_API_KEY  = process.env.OPENAI_API_KEY;
const OPENAI_API_BASE = process.env.OPENAI_API_BASE || "https://api.openai.com/v1";
const QUICK_ANSWERS_URL = process.env.QUICK_ANSWERS_URL || "";

// === L√ÑNKAR ===
const LINKS = {
  demo: "https://calendly.com/tim-curevia/30min",
  regConsult: "https://curevia.ai/consultant/register",
  regProvider: "https://curevia.ai/auth?type=signup&returnTo=/employer/register",
  pricingProviders: "https://preview--vardgig-connect.lovable.app/vardgivare",
};

// === SYSTEM PROMPT ===
const SYSTEM_PROMPT = `
Du √§r Curevia-boten. Svara kort och tydligt p√• svenska.

‚ö†Ô∏è Policy:
- Ta aldrig emot personnummer eller journaltext. Avbryt och h√§nvisa till s√§ker kontakt.
- Ge inga medicinska r√•d. Vid os√§kerhet: erbjud "Boka demo" (${LINKS.demo}).

üéØ M√•l:
- Konsulter/v√•rdpersonal: guida mot registrering (${LINKS.regConsult}).
- V√•rdgivare: guida mot registrering (${LINKS.regProvider}) eller demobokning (${LINKS.demo}).
- Lyft v√§rdet: direktmatchning utan mellanh√§nder; se CV och betyg. 3 f√∂rsta uppdrag/√•r gratis, d√§refter l√•g avgift (${LINKS.pricingProviders}).

üìö Snabbfakta:
Konsult: Utbetalning via Curevia n√§r v√•rdgivaren betalat; med eget bolag fakturerar du sj√§lv (ofta 30 dagar). Vid utebliven betalning driver Curevia √§rendet via inkasso/Kronofogden.
V√•rdgivare: Skapa uppdrag ‚Üí v√§lj bland intresserade konsulter. Dedikerad kundansvarig.
Svarston: kort, trygg, hj√§lpsam och med tydlig CTA.
`;

// === INBYGGDA QUICK ANSWERS (0 kostnad) ===
const DEFAULT_QA = [
  {
    pattern: /eget bolag|f√∂retag/i,
    reply: `Nej, du kan f√• betalt via Curevia eller genom ditt eget bolag ‚Äì v√§lj det som passar dig b√§st.\nüëâ Registrera konsultprofil: ${LINKS.regConsult}`
  },
  {
    pattern: /utbetal/i,
    reply: `Via Curevia sker utbetalning n√§r v√•rdgivaren betalat Curevia. Med eget bolag fakturerar du sj√§lv (vanligen 30 dagar).`
  },
  {
    pattern: /inte betalar|f√∂rsenad betal|betalningsp√•minn/i,
    reply: `Om en v√•rdgivare inte betalar i tid driver Curevia √§rendet vidare till inkasso och d√§refter Kronofogden. Du ska kunna k√§nna dig trygg att arbetet ers√§tts.`
  },
  {
    pattern: /kostnad|pris|avgift|prislista/i,
    reply: `Att testa √§r gratis och de tre f√∂rsta uppdragen per √•r √§r kostnadsfria. D√§refter l√•g avgift.\nüëâ Pris√∂versikt: ${LINKS.pricingProviders}`
  },
  {
    pattern: /onboard|komma ig√•ng|starta|hur b√∂rjar/i,
    reply: `Enkelt: skapa ett uppdrag och v√§lj bland intresserade konsulter. Du f√•r en dedikerad kundansvarig som f√∂ljer upp.`
  },
  { pattern: /registrera.*(v√•rdgiv|klinik|mottag)/i, reply: `Registrera v√•rdgivare: ${LINKS.regProvider}` },
  { pattern: /registrera.*(konsult|sjuksk√∂ters|l√§kar|v√•rd)/i, reply: `Registrera konsult: ${LINKS.regConsult}` },
  { pattern: /boka.*demo|demo|m√∂te|visa/i, reply: `Boka demo: ${LINKS.demo}` },
];

// === H√ÑMTA EXTERNA QUICK ANSWERS (fr√•n Gist/JSON) ===
let qaCache = null;
async function loadQuickAnswers(force = false) {
  if (!force && qaCache) return qaCache;
  const list = [...DEFAULT_QA];
  if (QUICK_ANSWERS_URL) {
    try {
      const r = await fetch(QUICK_ANSWERS_URL, { cache: "no-store" });
      if (r.ok) {
        const extra = await r.json();
        for (const item of extra) {
          if (item?.pattern && item?.reply) {
            list.push({ pattern: new RegExp(item.pattern, "i"), reply: String(item.reply) });
          }
        }
      }
    } catch { /* ignorera n√§tfel */ }
  }
  qaCache = list;
  return qaCache;
}

// === HJ√ÑLP ===
function hasSensitive(s="") {
  const pnr = /\b(\d{6}|\d{8})[-+]?\d{4}\b/;
  const journal = /journal|anamnes|diagnos|patient/i;
  return pnr.test(s) || journal.test(s);
}
function detectIntent(text="") {
  const t = text.toLowerCase();
  const isProvider = /(v√•rdgivar|klinik|mottag|region|upphandl|integration|pris|avgift|pilot)/.test(t);
  const isConsult  = /(konsult|uppdrag|ers√§ttn|timl√∂n|bemann|legitimation|profil|sjuksk√∂ters|l√§kar)/.test(t);
  const wantsDemo  = /(demo|visa|boka|m√∂te|kontakt)/.test(t);
  const wantsReg   = /(registrera|skapa konto|signa|ans√∂k)/.test(t);
  if (wantsReg && isProvider) return "register_provider";
  if (wantsReg && isConsult)  return "register_consult";
  if (wantsDemo || isProvider) return "provider";
  if (isConsult) return "consult";
  return "general";
}
function goalFor(intent) {
  if (intent === "provider") return `M√ÖL: driva v√•rdgivare till demo (${LINKS.demo}) eller registrering (${LINKS.regProvider}).`;
  if (intent === "consult")  return `M√ÖL: driva konsult/v√•rdpersonal till registrering (${LINKS.regConsult}).`;
  return `M√ÖL: om os√§ker, f√∂resl√• demo (${LINKS.demo}).`;
}

// === HANDLER ===
export default async function handler(req, res) {
  // GET: status + m√∂jlighet att ladda om externa QA via ?reload=1
  if (req.method === "GET") {
    if (req.url?.includes("reload=1")) qaCache = null;
    const qa = await loadQuickAnswers();
    return res.json({ ok: true, route: "/api/curevia-chat", qaCount: qa.length, hasKey: Boolean(OPENAI_API_KEY) });
  }

  if (req.method !== "POST") return res.status(405).end();

  try {
    const body = await new Promise((resolve, reject) => {
      let d=""; req.on("data", c=>d+=c); req.on("end", ()=>resolve(d||"{}")); req.on("error", reject);
    });
    const { message = "" } = JSON.parse(body);

    if (!message || typeof message !== "string") {
      return res.status(400).json({ error: "Missing 'message' string" });
    }
    if (hasSensitive(message)) {
      return res.json({ reply: "Jag kan inte ta emot person- eller journaluppgifter h√§r. Kontakta oss via s√§ker kanal." });
    }

    // 1) Direkta v√§gar (utan GPT)
    const intent = detectIntent(message);
    if (intent === "register_provider") return res.json({ reply: `Toppen! Registrera verksamheten h√§r: ${LINKS.regProvider}` });
    if (intent === "register_consult")  return res.json({ reply: `Grymt! Registrera konsultprofil h√§r: ${LINKS.regConsult}` });

    // 2) Quick answers (utan GPT) ‚Äì endast om det FINNS en tr√§ff
    const qa = await loadQuickAnswers();
    const hit = qa.find(qa => qa.pattern.test(message));
    if (hit) return res.json({ reply: hit.reply });

    // 3) GPT-fallback (alltid om inget QA-tr√§ff)
    if (!OPENAI_API_KEY) {
      // tydligt fel till oss utvecklare; anv√§ndare f√•r neutral fallback
      return res.status(500).json({ error: "Missing OPENAI_API_KEY" });
    }

    const payload = {
      model: "gpt-5-mini",
      input: `${SYSTEM_PROMPT}\n\n${goalFor(intent)}\n\nAnv√§ndarens fr√•ga: ${message}`,
      max_output_tokens: 220
    };

    const r = await fetch(`${OPENAI_API_BASE}/responses`, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(payload)
    });

    const data = await r.json();
    if (!r.ok) {
      return res.status(502).json({ error: data?.error || data });
    }

    const reply =
      data?.output_text ||
      data?.output?.[0]?.content?.[0]?.text ||
      "Vill du boka en demo s√• visar jag mer?";

    return res.json({ reply });
  } catch (e) {
    return res.status(500).json({ error: String(e) });
  }
}
