// api/curevia-chat.js

// === ENV ===
const OPENAI_API_KEY  = process.env.OPENAI_API_KEY;
const OPENAI_API_BASE = process.env.OPENAI_API_BASE || "https://api.openai.com/v1";
const QUICK_ANSWERS_URL = process.env.QUICK_ANSWERS_URL || "";

// === L√ÑNKAR ===
const LINKS = {
  demo: "https://calendly.com/tim-curevia/30min",
  regConsult: "https://curevia.ai/consultant/register",
  regProvider: "https://curevia.ai/auth?type=signup&returnTo=/employer/register",
  pricingProviders: "https://preview--vardgig-connect.lovable.app/vardgivare",
};

// === SYSTEM-PROMPT: varm, kort och hj√§lpsam ===
const SYSTEM_PROMPT = `
Du √§r Curevia-boten. Svara alltid kort (2‚Äì3 meningar), p√• svenska, i en varm, l√§ttsam och trygg ton.
Skriv som en hj√§lpsam kollega ‚Äì undvik byr√•kratiska formuleringar. Var konkret och positiv.
Om fr√•gan √§r oklar: be sn√§llt om f√∂rtydligande i en mening.
Viktigt: Hantera aldrig personnummer eller journaldata ‚Äì avbryt och h√§nvisa till s√§ker kontakt.
Ber√§tta inte om interna policys; ge bara relevant, praktiskt svar.
`;

// === INBYGGDA QUICK ANSWERS ===
const DEFAULT_QA = [
  {
    pattern: /eget bolag|f√∂retag/i,
    reply: `Du beh√∂ver inte ha eget bolag ‚Äì du kan f√• betalt via Curevia eller fakturera sj√§lv om du vill. üëâ Registrera konsultprofil: ${LINKS.regConsult}`
  },
  {
    pattern: /utbetal/i,
    reply: `Utbetalning via Curevia sker n√§r v√•rdgivaren betalat. Har du eget bolag fakturerar du sj√§lv, oftast 30 dagar.`
  },
  {
    pattern: /inte betalar|f√∂rsenad betal|betalningsp√•minn/i,
    reply: `Om en v√•rdgivare inte betalar i tid driver Curevia √§rendet vidare till inkasso och d√§refter Kronofogden ‚Äì du ska k√§nna dig trygg att f√• betalt.`
  },
  {
    pattern: /kostnad|pris|avgift|prislista/i,
    reply: `Att testa √§r gratis ‚Äì de tre f√∂rsta uppdragen per √•r √§r kostnadsfria. D√§refter l√•g avgift. üëâ Prislista: ${LINKS.pricingProviders}`
  },
  {
    pattern: /onboard|komma ig√•ng|starta|hur b√∂rjar/i,
    reply: `Skapa ett uppdrag och v√§lj bland intresserade konsulter ‚Äì du f√•r en dedikerad kundansvarig som ser till att allt flyter p√•.`
  },
  { pattern: /registrera.*(v√•rdgiv|klinik|mottag)/i, reply: `Registrera v√•rdgivare: ${LINKS.regProvider}` },
  { pattern: /registrera.*(konsult|sjuksk√∂ters|l√§kar|v√•rd)/i, reply: `Registrera konsult: ${LINKS.regConsult}` },
  { pattern: /boka.*demo|demo|m√∂te|visa/i, reply: `Boka g√§rna en kort demo s√• visar vi hur allt funkar: ${LINKS.demo}` },
];

// === LADDA EXTERNA QUICK ANSWERS (Gist/JSON) ===
let qaCache = null;
async function loadQuickAnswers(force = false) {
  if (!force && qaCache) return qaCache;
  const list = [...DEFAULT_QA];
  if (QUICK_ANSWERS_URL) {
    try {
      const r = await fetch(QUICK_ANSWERS_URL, { cache: "no-store" });
      if (r.ok) {
        const extra = await r.json();
        for (const item of extra) {
          if (item?.pattern && item?.reply) {
            list.push({ pattern: new RegExp(item.pattern, "i"), reply: String(item.reply) });
          }
        }
      }
    } catch {
      // Ignorera n√§tverksfel
    }
  }
  qaCache = list;
  return qaCache;
}

// === HJ√ÑLPFUNKTIONER ===
function hasSensitive(s = "") {
  const pnr = /\b(\d{6}|\d{8})[-+]?\d{4}\b/;
  const journal = /journal|anamnes|diagnos|patient/i;
  return pnr.test(s) || journal.test(s);
}

function detectIntent(text = "") {
  const t = text.toLowerCase();
  const isProvider = /(v√•rdgivar|klinik|mottag|region|upphandl|integration|pris|avgift|pilot)/.test(t);
  const isConsult  = /(konsult|uppdrag|ers√§ttn|timl√∂n|bemann|legitimation|profil|sjuksk√∂ters|l√§kar)/.test(t);
  const wantsDemo  = /(demo|visa|boka|m√∂te|kontakt)/.test(t);
  const wantsReg   = /(registrera|skapa konto|signa|ans√∂k)/.test(t);
  if (wantsReg && isProvider) return "register_provider";
  if (wantsReg && isConsult)  return "register_consult";
  if (wantsDemo || isProvider) return "provider";
  if (isConsult) return "consult";
  return "general";
}

function goalFor(intent) {
  if (intent === "provider")
    return `M√•l: hj√§lp v√•rdgivare vidare, g√§rna till demo (${LINKS.demo}) eller registrering (${LINKS.regProvider}).`;
  if (intent === "consult")
    return `M√•l: hj√§lp konsult/v√•rdpersonal vidare, g√§rna till registrering (${LINKS.regConsult}).`;
  return `M√•l: ge kort hj√§lp och f√∂resl√• demo vid os√§kerhet (${LINKS.demo}).`;
}

// G√∂r svaret kort (max 3 meningar) och l√§gg till varm CTA.
function polishReply(text, intent = "general") {
  if (!text) return "Vill du boka en demo s√• visar jag g√§rna mer üåü " + LINKS.demo;

  // Ta max 3 meningar
  const parts = text
    .replace(/\s+/g, " ")
    .split(/(?<=[.!?])\s+/)
    .filter(Boolean)
    .slice(0, 3);

  let msg = parts.join(" ");

  // L√§gg till CTA om det inte redan finns l√§nkar/CTA
  const hasLink = /(https?:\/\/|boka.*demo|registrera)/i.test(msg);
  if (!hasLink) {
    if (intent === "provider") {
      msg += ` Vill du kika tillsammans? Boka g√§rna en kort demo üåü ${LINKS.demo}`;
    } else if (intent === "consult") {
      msg += ` Vill du komma ig√•ng? Registrera dig h√§r üíô ${LINKS.regConsult}`;
    } else {
      msg += ` Vill du veta mer? Jag visar g√§rna üåü ${LINKS.demo}`;
    }
  }
  return msg;
}

// === HANDLER ===
export default async function handler(req, res) {
  // GET: status + ?reload=1 f√∂r att ladda om externa QA
  if (req.method === "GET") {
    if (req.url?.includes("reload=1")) qaCache = null;
    const qa = await loadQuickAnswers();
    return res.json({
      ok: true,
      route: "/api/curevia-chat",
      qaCount: qa.length,
      hasKey: Boolean(OPENAI_API_KEY),
    });
  }

  if (req.method !== "POST") return res.status(405).end();

  try {
    // L√§s kropp (Node/Vercel)
    const body = await new Promise((resolve, reject) => {
      let d = "";
      req.on("data", (c) => (d += c));
      req.on("end", () => resolve(d || "{}"));
      req.on("error", reject);
    });

    const { message = "" } = JSON.parse(body);

    if (!message || typeof message !== "string") {
      return res.status(400).json({ error: "Missing 'message' string" });
    }

    if (hasSensitive(message)) {
      return res.json({
        reply:
          "Jag kan tyv√§rr inte ta emot person- eller journaluppgifter h√§r. H√∂r av dig via en s√§ker kanal s√• hj√§lper vi dig vidare üíô",
      });
    }

    // Intent-genv√§gar
    const intent = detectIntent(message);
    if (intent === "register_provider")
      return res.json({ reply: polishReply(`H√§r kan du registrera din verksamhet: ${LINKS.regProvider}`, intent) });
    if (intent === "register_consult")
      return res.json({ reply: polishReply(`Toppen! Registrera din konsultprofil h√§r: ${LINKS.regConsult}`, intent) });

    // Quick answers (snabbt & billigt) ‚Äì endast om det tr√§ffar
    const qa = await loadQuickAnswers();
    const hit = qa.find((qa) => qa.pattern.test(message));
    if (hit) return res.json({ reply: polishReply(hit.reply, intent) });

    // GPT fallback (chat/completions ‚Äì stabilt)
    if (!OPENAI_API_KEY) {
      return res.status(500).json({ error: "Missing OPENAI_API_KEY" });
    }

    const payload = {
      model: "gpt-4o-mini", // stabil & prisv√§rd
      messages: [
        { role: "system", content: `${SYSTEM_PROMPT}\n${goalFor(intent)}` },
        { role: "user", content: message },
      ],
      temperature: 0.3,
      max_tokens: 220,
    };

    const r = await fetch(`${OPENAI_API_BASE}/chat/completions`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    const data = await r.json();
    if (!r.ok) {
      return res.status(502).json({ error: data });
    }

    const raw =
      data?.choices?.[0]?.message?.content?.trim() ||
      "Jag hj√§lper g√§rna till! Vill du att vi g√•r igenom det ihop? üåü " + LINKS.demo;

    return res.json({ reply: polishReply(raw, intent) });
  } catch (e) {
    return res.status(500).json({ error: String(e) });
  }
}
